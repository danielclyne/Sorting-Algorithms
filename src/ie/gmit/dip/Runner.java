package ie.gmit.dip;

import java.text.DecimalFormat;

public class Runner {
	// Instantiate each class in Runner
	BubbleSort bubSort = new BubbleSort();
	MergeSort merSort = new MergeSort();
	CountingSort countSort = new CountingSort();
	RadixSort radSort = new RadixSort();
	QuickSort quickSort = new QuickSort();
	Utilities Util = new Utilities();
	// Variable to hold the number of runs for each sorting algorithm
	int numRuns = 10;

	// Method that runs a chosen sort algorithm with a chosen array size
	public double runSort(int arrSize, int sortType) {
		// Array to hold the times of each sort run
		double[] runTimes = new double[numRuns];
		// Loop that runs the sorting algorithm 10 times
		for (int i = 0; i < numRuns; i++) {
			// Variable to hold the array integers generated by the randomArray method
			int[] arr = Util.randomArray(arrSize);
			// If this sortType is chosen run this block of code
			if (sortType == 1) {
				// Variable to hold start time of sorting algorithm
				long startTime = System.nanoTime();
				// Pass in array and run sorting algorithm
				bubSort.bubbleSort(arr);
				// Variable to hold end time of sorting algorithm
				long endTime = System.nanoTime();
				// Calculate running time of sorting algorithm
				long timeElapsed = endTime - startTime;
				// Convert running time to milliseconds
				double elapsedMillis = timeElapsed / 1000000.0;
				// Add result to the runTimes array
				runTimes[i] = elapsedMillis;
			} else if (sortType == 2) {
				long startTime = System.nanoTime();
				merSort.mergeSort(arr, 0, arr.length - 1);
				long endTime = System.nanoTime();
				long timeElapsed = endTime - startTime;
				double elapsedMillis = timeElapsed / 1000000.0;
				runTimes[i] = elapsedMillis;
			} else if (sortType == 3) {
				long startTime = System.nanoTime();
				countSort.countingSort(arr, arr.length);
				long endTime = System.nanoTime();
				long timeElapsed = endTime - startTime;
				double elapsedMillis = timeElapsed / 1000000.0;
				runTimes[i] = elapsedMillis;
			} else if (sortType == 4) {
				long startTime = System.nanoTime();
				radSort.radixSort(arr, arr.length);
				long endTime = System.nanoTime();
				long timeElapsed = endTime - startTime;
				double elapsedMillis = timeElapsed / 1000000.0;
				runTimes[i] = elapsedMillis;
			} else if (sortType == 5) {
				long startTime = System.nanoTime();
				quickSort.quickSort(arr, 0, arr.length - 1);
				long endTime = System.nanoTime();
				long timeElapsed = endTime - startTime;
				double elapsedMillis = timeElapsed / 1000000.0;
				runTimes[i] = elapsedMillis;
			}
		}
		// Method which returns the average of the 10 run times
		double runTimeAverage = Util.getAverage(runTimes);
		return runTimeAverage;
	}

	public static void main(String[] args) {
		// Instantiate Runner class in the main method
		Runner r = new Runner();
		// Instantiate DecimalFormat class to format results to 3 decimal places
		DecimalFormat df = new DecimalFormat();

		System.out.println("Please wait while sorting algorithms are running!");
		System.out.println("Results will appear below:");
		System.out.println();

		// Run Bubble sort 10 times and return average for each input size
		double aveBubble100 = r.runSort(100, 1);
		double aveBubble250 = r.runSort(250, 1);
		double aveBubble500 = r.runSort(500, 1);
		double aveBubble750 = r.runSort(750, 1);
		double aveBubble1000 = r.runSort(1000, 1);
		double aveBubble1250 = r.runSort(1250, 1);
		double aveBubble2500 = r.runSort(2500, 1);
		double aveBubble3750 = r.runSort(3750, 1);
		double aveBubble5000 = r.runSort(5000, 1);
		double aveBubble6250 = r.runSort(6250, 1);
		double aveBubble7500 = r.runSort(7500, 1);
		double aveBubble8750 = r.runSort(8750, 1);
		double aveBubble10000 = r.runSort(10000, 1);

		// Run Merge sort 10 times and return average for each input size
		double aveMerge100 = r.runSort(100, 2);
		double aveMerge250 = r.runSort(250, 2);
		double aveMerge500 = r.runSort(500, 2);
		double aveMerge750 = r.runSort(750, 2);
		double aveMerge1000 = r.runSort(1000, 2);
		double aveMerge1250 = r.runSort(1250, 2);
		double aveMerge2500 = r.runSort(2500, 2);
		double aveMerge3750 = r.runSort(3750, 2);
		double aveMerge5000 = r.runSort(5000, 2);
		double aveMerge6250 = r.runSort(6250, 2);
		double aveMerge7500 = r.runSort(7500, 2);
		double aveMerge8750 = r.runSort(8750, 2);
		double aveMerge10000 = r.runSort(10000, 2);

		// Run Counting sort 10 times and return average for each input size
		double aveCount100 = r.runSort(100, 3);
		double aveCount250 = r.runSort(250, 3);
		double aveCount500 = r.runSort(500, 3);
		double aveCount750 = r.runSort(750, 3);
		double aveCount1000 = r.runSort(1000, 3);
		double aveCount1250 = r.runSort(1250, 3);
		double aveCount2500 = r.runSort(2500, 3);
		double aveCount3750 = r.runSort(3750, 3);
		double aveCount5000 = r.runSort(5000, 3);
		double aveCount6250 = r.runSort(6250, 3);
		double aveCount7500 = r.runSort(7500, 3);
		double aveCount8750 = r.runSort(8750, 3);
		double aveCount10000 = r.runSort(10000, 3);

		//// Run Radix sort 10 times and return average for each input size
		double aveRadix100 = r.runSort(100, 4);
		double aveRadix250 = r.runSort(250, 4);
		double aveRadix500 = r.runSort(500, 4);
		double aveRadix750 = r.runSort(750, 4);
		double aveRadix1000 = r.runSort(1000, 4);
		double aveRadix1250 = r.runSort(1250, 4);
		double aveRadix2500 = r.runSort(2500, 4);
		double aveRadix3750 = r.runSort(3750, 4);
		double aveRadix5000 = r.runSort(5000, 4);
		double aveRadix6250 = r.runSort(6250, 4);
		double aveRadix7500 = r.runSort(7500, 4);
		double aveRadix8750 = r.runSort(8750, 4);
		double aveRadix10000 = r.runSort(10000, 4);

		// Run Quick sort 10 times and return average for each input size
		double aveQuick100 = r.runSort(100, 5);
		double aveQuick250 = r.runSort(250, 5);
		double aveQuick500 = r.runSort(500, 5);
		double aveQuick750 = r.runSort(750, 5);
		double aveQuick1000 = r.runSort(1000, 5);
		double aveQuick1250 = r.runSort(1250, 5);
		double aveQuick2500 = r.runSort(2500, 5);
		double aveQuick3750 = r.runSort(3750, 5);
		double aveQuick5000 = r.runSort(5000, 5);
		double aveQuick6250 = r.runSort(6250, 5);
		double aveQuick7500 = r.runSort(7500, 5);
		double aveQuick8750 = r.runSort(8750, 5);
		double aveQuick10000 = r.runSort(10000, 5);

		/*
		 * Print the results of each sorting algorithm for each input size. The results
		 * are the average time in milliseconds after 10 runs.
		 */

		System.out.println(
				"Size		100	250	500	750	1000	1250	2500	3750	5000	6250	7500	8750	10000");

		System.out.println("Bubble Sort" + "	" + df.format(aveBubble100) + "	" + df.format(aveBubble250) + "	"
				+ df.format(aveBubble500) + "	" + df.format(aveBubble750) + "	" + df.format(aveBubble1000) + "	"
				+ df.format(aveBubble1250) + "	" + df.format(aveBubble2500) + "	" + df.format(aveBubble3750)
				+ "	" + df.format(aveBubble5000) + "	" + df.format(aveBubble6250) + "	" + df.format(aveBubble7500)
				+ "	" + df.format(aveBubble8750) + "	" + df.format(aveBubble10000));

		System.out.println("Merge Sort" + "	" + df.format(aveMerge100) + "	" + df.format(aveMerge250) + "	"
				+ df.format(aveMerge500) + "	" + df.format(aveMerge750) + "	" + df.format(aveMerge1000) + "	"
				+ df.format(aveMerge1250) + "	" + df.format(aveMerge2500) + "	" + df.format(aveMerge3750) + "	"
				+ df.format(aveMerge5000) + "	" + df.format(aveMerge6250) + "	" + df.format(aveMerge7500) + "	"
				+ df.format(aveMerge8750) + "	" + df.format(aveMerge10000));

		System.out.println("Counting Sort" + "	" + df.format(aveCount100) + "	" + df.format(aveCount250) + "	"
				+ df.format(aveCount500) + "	" + df.format(aveCount750) + "	" + df.format(aveCount1000) + "	"
				+ df.format(aveCount1250) + "	" + df.format(aveCount2500) + "	" + df.format(aveCount3750) + "	"
				+ df.format(aveCount5000) + "	" + df.format(aveCount6250) + "	" + df.format(aveCount7500) + "	"
				+ df.format(aveCount8750) + "	" + df.format(aveCount10000));

		System.out.println("Radix Sort" + "	" + df.format(aveRadix100) + "	" + df.format(aveRadix250) + "	"
				+ df.format(aveRadix500) + "	" + df.format(aveRadix750) + "	" + df.format(aveRadix1000) + "	"
				+ df.format(aveRadix1250) + "	" + df.format(aveRadix2500) + "	" + df.format(aveRadix3750) + "	"
				+ df.format(aveRadix5000) + "	" + df.format(aveRadix6250) + "	" + df.format(aveRadix7500) + "	"
				+ df.format(aveRadix8750) + "	" + df.format(aveRadix10000));

		System.out.println("Quick Sort" + "	" + df.format(aveQuick100) + "	" + df.format(aveQuick250) + "	"
				+ df.format(aveQuick500) + "	" + df.format(aveQuick750) + "	" + df.format(aveQuick1000) + "	"
				+ df.format(aveQuick1250) + "	" + df.format(aveQuick2500) + "	" + df.format(aveQuick3750) + "	"
				+ df.format(aveQuick5000) + "	" + df.format(aveQuick6250) + "	" + df.format(aveQuick7500) + "	"
				+ df.format(aveQuick8750) + "	" + df.format(aveQuick10000));
	}
}